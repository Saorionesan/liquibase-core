/* Generated By:JavaCC: Do not edit this line. SimpleSqlGrammarTokenManager.java */
package liquibase.util.grammar;

/** Token Manager. */
public class SimpleSqlGrammarTokenManager implements SimpleSqlGrammarConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjMoveStringLiteralDfa0_0()
{
   return jjMoveNfa_0(3, 0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x100000020L, 0x0L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x1L, 0x0L
};
static final long[] jjbitVec2 = {
   0x4000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec3 = {
   0x830000003fffL, 0x180000000L, 0x0L, 0x0L
};
static final long[] jjbitVec4 = {
   0x1L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0x0L, 0x8000000000000000L
};
static final long[] jjbitVec6 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec8 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec9 = {
   0x0L, 0x0L, 0x88c0088200000000L, 0x0L
};
static final long[] jjbitVec10 = {
   0x0L, 0x4000000000000000L, 0x80L, 0x0L
};
static final long[] jjbitVec11 = {
   0x0L, 0xfc000000L, 0x4000000000000600L, 0x18000000000049L
};
static final long[] jjbitVec12 = {
   0xc8003600L, 0x3c0000000000L, 0x0L, 0x100000L
};
static final long[] jjbitVec13 = {
   0x3fffL, 0x0L, 0x0L, 0x380000000000000L
};
static final long[] jjbitVec14 = {
   0x7fff000000000000L, 0x40000000L, 0x0L, 0x0L
};
static final long[] jjbitVec15 = {
   0x0L, 0x1003000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec16 = {
   0x0L, 0x0L, 0x0L, 0x1000000000000L
};
static final long[] jjbitVec17 = {
   0x0L, 0x0L, 0x0L, 0x10000000000000L
};
static final long[] jjbitVec18 = {
   0x0L, 0xc008000L, 0x0L, 0x0L
};
static final long[] jjbitVec19 = {
   0x3c0000000017fff0L, 0x0L, 0x20L, 0x61f0000L
};
static final long[] jjbitVec20 = {
   0x0L, 0xfc00L, 0x0L, 0x800000000000000L
};
static final long[] jjbitVec21 = {
   0x0L, 0x1ff00000000L, 0x0L, 0x0L
};
static final long[] jjbitVec22 = {
   0x0L, 0x600000000000L, 0x18000000L, 0x380000000000L
};
static final long[] jjbitVec23 = {
   0x60000000000000L, 0x0L, 0x0L, 0x7700000L
};
static final long[] jjbitVec24 = {
   0x7ffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec25 = {
   0x0L, 0x30L, 0x0L, 0x0L
};
static final long[] jjbitVec26 = {
   0xc0000000L, 0x0L, 0x3f7f00000000L, 0x0L
};
static final long[] jjbitVec27 = {
   0x0L, 0x1fc000000L, 0x0L, 0xf000000000000000L
};
static final long[] jjbitVec28 = {
   0xf800000000000000L, 0xc000000000000000L, 0x0L, 0x800ffL
};
static final long[] jjbitVec29 = {
   0xffff00ffffff0000L, 0x600000007ffbffefL, 0x6000L, 0x0L
};
static final long[] jjbitVec30 = {
   0x60000000f00L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec31 = {
   0x0L, 0x3fff0000000000L, 0x0L, 0xffc000000060L
};
static final long[] jjbitVec32 = {
   0x0L, 0x0L, 0x1fffff8L, 0x300000000f000000L
};
static final long[] jjbitVec33 = {
   0x0L, 0x0L, 0x0L, 0xde00000000000000L
};
static final long[] jjbitVec34 = {
   0x0L, 0x1000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec35 = {
   0xffff7fffffffffffL, 0x7L, 0x0L, 0x0L
};
static final long[] jjbitVec36 = {
   0x20010000fff3ff0eL, 0x0L, 0x100000000L, 0x800000000000000L
};
static final long[] jjbitVec37 = {
   0x0L, 0x0L, 0x0L, 0xc000000000000000L
};
static final long[] jjbitVec38 = {
   0xe000L, 0x4008000000000000L, 0x0L, 0xfc000000000000L
};
static final long[] jjbitVec39 = {
   0x0L, 0xf0000000000000L, 0x0L, 0x170000000000c000L
};
static final long[] jjbitVec40 = {
   0xc00000000000L, 0x80000000L, 0x0L, 0xc0003ffeL
};
static final long[] jjbitVec41 = {
   0x0L, 0xf0000000L, 0x0L, 0x30000c0000000L
};
static final long[] jjbitVec42 = {
   0x0L, 0x0L, 0x0L, 0x80000000000L
};
static final long[] jjbitVec43 = {
   0xc000000000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec44 = {
   0xffff000003ff0000L, 0xd0bfff7ffffL, 0x0L, 0x0L
};
static final long[] jjbitVec45 = {
   0xb80000018c00f7eeL, 0x3fa8000000L, 0x0L, 0x0L
};
static final long[] jjbitVec46 = {
   0xfff0000040220002L, 0xffffffffffffdfffL, 0xfffff02f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec47 = {
   0x0L, 0x0L, 0x420040000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec48 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x501f0003ffc3L
};
static final long[] jjbitVec49 = {
   0x0L, 0xbcdf000000000000L, 0xfffffffbffffd740L, 0xffbfffffffffffffL
};
static final long[] jjbitVec50 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffc03L, 0xffffffffffffffffL
};
static final long[] jjbitVec51 = {
   0xfffeffffffffffffL, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec52 = {
   0xffffffff00000000L, 0xfffec000000007ffL, 0xffffffffffffffffL, 0x9c00c060002fffffL
};
static final long[] jjbitVec53 = {
   0xfffffffd0000L, 0xffffffffffffe000L, 0x2003fffffffffL, 0x43007fffffffc00L
};
static final long[] jjbitVec54 = {
   0x110043fffffL, 0x1ffffffL, 0x1fffff00000000L, 0x0L
};
static final long[] jjbitVec55 = {
   0x23fffffffffffff0L, 0xfffe0003ff010000L, 0x23c5fdfffff99fe1L, 0x30003b0004000L
};
static final long[] jjbitVec56 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbbfe0L, 0x200000300010000L
};
static final long[] jjbitVec57 = {
   0x23edfdfffff99fe0L, 0x20003b0000000L, 0x3ffc718d63dc7e8L, 0x10000L
};
static final long[] jjbitVec58 = {
   0x23fffdfffffddfe0L, 0x307000000L, 0x23effdfffffddfe0L, 0x6000340000000L
};
static final long[] jjbitVec59 = {
   0x27fffffffffddfe0L, 0xfc00000380004000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec60 = {
   0xdfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0xf000005fL
};
static final long[] jjbitVec61 = {
   0x1L, 0x1ffffffffeffL, 0x1f00L, 0x0L
};
static final long[] jjbitVec62 = {
   0x800007ffffffffffL, 0xffe1c0623c3f0000L, 0xffffffff00004003L, 0xf7ffffffffff20bfL
};
static final long[] jjbitVec63 = {
   0xffffffffffffffffL, 0xffffffff3d7f3dffL, 0x7f3dffffffff3dffL, 0xffffffffff7fff3dL
};
static final long[] jjbitVec64 = {
   0xffffffffff3dffffL, 0x7ffffffL, 0xffffffff0000ffffL, 0x3f3fffffffffffffL
};
static final long[] jjbitVec65 = {
   0xffffffffffffffffL, 0xffff9fffffffffffL, 0xffffffff07fffffeL, 0x1fe07ffffffffffL
};
static final long[] jjbitVec66 = {
   0x3ffff0003dfffL, 0x1dfff0003ffffL, 0xfffffffffffffL, 0x10800000L
};
static final long[] jjbitVec67 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0xffff05ffffffffffL, 0x3fffffffffffffL
};
static final long[] jjbitVec68 = {
   0x7fffffffL, 0x1f3fffffff0000L, 0xffff0fffffffffffL, 0x3ffL
};
static final long[] jjbitVec69 = {
   0xffffffff007fffffL, 0x1fffffL, 0x8000000000L, 0x0L
};
static final long[] jjbitVec70 = {
   0xfffffffffffe0L, 0xfe0L, 0xfc00c001fffffff8L, 0x3fffffffffL
};
static final long[] jjbitVec71 = {
   0xfffffffffL, 0x3ffffffffc00e000L, 0x0L, 0x63de0000000000L
};
static final long[] jjbitVec72 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L
};
static final long[] jjbitVec73 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec74 = {
   0x0L, 0x8002000000000000L, 0x1fff0000L, 0x0L
};
static final long[] jjbitVec75 = {
   0xf3ffbd503e2ffc84L, 0x43e0L, 0x18L, 0x0L
};
static final long[] jjbitVec76 = {
   0xffff7fffffffffffL, 0xffffffff7fffffffL, 0xffffffffffffffffL, 0xc781fffffffffL
};
static final long[] jjbitVec77 = {
   0xffff20bfffffffffL, 0x80ffffffffffL, 0x7f7f7f7f007fffffL, 0x7f7f7f7fL
};
static final long[] jjbitVec78 = {
   0x800000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec79 = {
   0x183e000000000060L, 0xfffffffffffffffeL, 0xfffffffee07fffffL, 0xf7ffffffffffffffL
};
static final long[] jjbitVec80 = {
   0xfffe3fffffffffe0L, 0xffffffffffffffffL, 0x7ffffff00007fffL, 0xffff000000000000L
};
static final long[] jjbitVec81 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec82 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffL
};
static final long[] jjbitVec83 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x3fffffffffff0000L
};
static final long[] jjbitVec84 = {
   0xc00ffff1fffL, 0x80007fffffffffffL, 0xffffffff3fffffffL, 0x3fffffffffL
};
static final long[] jjbitVec85 = {
   0xfffffffcff800000L, 0xffffffffffffffffL, 0xff3ffffffff9ffL, 0xff80000000000000L
};
static final long[] jjbitVec86 = {
   0x7fffff7bbL, 0xfffffffffffffL, 0xffffffffffffcL, 0x28fc000000000000L
};
static final long[] jjbitVec87 = {
   0xffff003ffffffc00L, 0x1fffffff0000007fL, 0x7fffffffffff0L, 0x7c00ffdf00008000L
};
static final long[] jjbitVec88 = {
   0x1ffffffffffL, 0xc47fffff00000ff7L, 0x3e62ffffffffffffL, 0x1c07ff38000005L
};
static final long[] jjbitVec89 = {
   0xffff7f7f007e7e7eL, 0xffff003ff7ffffffL, 0xffffffffffffffffL, 0x7ffffffffL
};
static final long[] jjbitVec90 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffff000fffffffffL, 0xffffffffffff87fL
};
static final long[] jjbitVec91 = {
   0xffffffffffffffffL, 0xffff3fffffffffffL, 0xffffffffffffffffL, 0x3ffffffL
};
static final long[] jjbitVec92 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec93 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec94 = {
   0x0L, 0xffdf000000000000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec95 = {
   0x7fffffe00000000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0x1cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 76;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xfc00fffe00000000L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddStates(0, 6);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 36)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddStates(10, 15);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  else if (curChar == 46)
                     jjCheckNAdd(12);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar != 45)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 42)
                     jjCheckNAddStates(19, 21);
                  break;
               case 7:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 6);
                  break;
               case 8:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 6);
                  break;
               case 9:
                  if (curChar == 47 && kind > 3)
                     kind = 3;
                  break;
               case 10:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 11:
                  if (curChar == 46)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 14:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(15);
                  break;
               case 16:
               case 18:
                  if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  break;
               case 17:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 20:
                  if (curChar != 39)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
               case 23:
                  if (curChar == 39)
                     jjCheckNAddStates(22, 24);
                  break;
               case 22:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 25:
                  if ((0xfc00fffe00000000L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(0, 6);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 11);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar != 46)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 31:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if (curChar != 36)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(10, 15);
                  break;
               case 39:
                  if (curChar == 36)
                     jjCheckNAddStates(25, 28);
                  break;
               case 40:
                  if ((0x3ff001800000000L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 41:
                  if ((0x100002400L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar == 46)
                     jjCheckNAddStates(32, 36);
                  break;
               case 43:
                  if ((0x100002400L & l) != 0L)
                     jjCheckNAddStates(32, 36);
                  break;
               case 44:
                  if (curChar != 36)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(37, 40);
                  break;
               case 45:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(41, 43);
                  break;
               case 47:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 48:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 51:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 53:
                  if (curChar == 34)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if (curChar != 34)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 56:
                  if (curChar != 36)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(57);
                  break;
               case 59:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 60:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 62:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 63:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 66:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 68:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 70:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 71:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 72:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 73:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 74:
                  if (curChar == 34 && kind > 12)
                     kind = 12;
                  break;
               case 75:
                  if (curChar == 34 && kind > 13)
                     kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddStates(10, 15);
                  }
                  else if (curChar == 96)
                     jjCheckNAddTwoStates(66, 68);
                  else if (curChar == 91)
                     jjAddStates(50, 51);
                  if ((0x78000001f8000001L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  break;
               case 2:
                  if (kind > 2)
                     kind = 2;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
               case 8:
                  jjCheckNAddTwoStates(8, 6);
                  break;
               case 13:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 17:
                  jjCheckNAddStates(16, 18);
                  break;
               case 19:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 22:
                  jjCheckNAddStates(22, 24);
                  break;
               case 24:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x78000001f8000001L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(54, 55);
                  break;
               case 34:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(10, 15);
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 40:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(37, 40);
                  break;
               case 45:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(41, 43);
                  break;
               case 46:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
               case 48:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar != 93)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 50:
                  if (curChar == 96)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar != 96)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 54:
                  jjAddStates(58, 59);
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(57);
                  break;
               case 58:
                  if (curChar == 91)
                     jjAddStates(50, 51);
                  break;
               case 59:
               case 60:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 61:
                  if (curChar == 93)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 62:
               case 63:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 64:
                  if (curChar == 93 && kind > 12)
                     kind = 12;
                  break;
               case 65:
                  if (curChar == 96)
                     jjCheckNAddTwoStates(66, 68);
                  break;
               case 66:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 67:
                  if (curChar == 96)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 68:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 69:
                  if (curChar == 96 && kind > 12)
                     kind = 12;
                  break;
               case 71:
                  jjAddStates(60, 61);
                  break;
               case 73:
                  jjAddStates(62, 63);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddStates(10, 15);
                  }
                  break;
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
               case 8:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(8, 6);
                  break;
               case 17:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(16, 18);
                  break;
               case 22:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(22, 24);
                  break;
               case 25:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 15)
                     kind = 15;
                  break;
               case 38:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(10, 15);
                  break;
               case 39:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(25, 28);
                  break;
               case 40:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(29, 31);
                  break;
               case 44:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(37, 40);
                  break;
               case 45:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(41, 43);
                  break;
               case 47:
               case 48:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 51:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(44, 45);
                  break;
               case 54:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(58, 59);
                  break;
               case 56:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(57);
                  break;
               case 59:
               case 60:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 62:
               case 63:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 66:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(46, 47);
                  break;
               case 68:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(48, 49);
                  break;
               case 71:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(60, 61);
                  break;
               case 73:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(62, 63);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 76 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   27, 11, 28, 29, 33, 34, 37, 71, 73, 75, 39, 40, 41, 42, 56, 57, 
   17, 19, 20, 6, 7, 9, 22, 24, 20, 39, 40, 41, 42, 40, 41, 42, 
   43, 44, 46, 50, 53, 41, 42, 44, 45, 41, 42, 45, 51, 52, 66, 67, 
   68, 69, 59, 62, 14, 15, 31, 32, 35, 36, 54, 55, 71, 72, 73, 74, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec1[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec5[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         if ((jjbitVec6[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 8:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 35:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 41:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec45[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 8:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec62[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec63[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec64[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec65[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec66[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec67[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec68[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec69[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec70[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec71[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec72[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec73[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec74[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec75[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec76[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec77[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec78[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec79[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec80[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec81[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec82[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec83[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec84[i2] & l2) != 0L);
      case 167:
         return ((jjbitVec85[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec86[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec87[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec88[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec89[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec90[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec91[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec92[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec93[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec94[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec95[i2] & l2) != 0L);
      default :
         if ((jjbitVec46[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[76];
private final int[] jjstateSet = new int[152];
protected char curChar;
/** Constructor. */
public SimpleSqlGrammarTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public SimpleSqlGrammarTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 76; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
